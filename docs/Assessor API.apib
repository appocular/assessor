FORMAT: 1A

# Assessor

Assessor is the brains of Appocular. It keeps track of snapshots,
checkpoints, batches and images.

Images for visual testing is submitted by creating a batch. A batch is
associated with a snapshot, and images submitted in the batch is put
into checkpoints the on the snapshot. Multiple batches may be run on
the same commit, facilitating multiple test suites or parallel
running.

## General for the API

Assessor uses URLs as identifiers, that is, the URL of the object is
also its ID, which is provided in the `self` key of the response
objects.

While the resources are documented here, one should not construct the
URLs manually, but rather use the URL provided by previous calls
(except for the top-level objects). For instance, an UI would fetch a
snapshot by identifier (which is the external identifier used when
submitting the snapshot), but use the URLs provided in the snapshot
response to fetch the checkpoints.

Actions on resources are usually located at `<URL of object>/<action>`,
and are provided in the `action` key of the response object. Again,
don't construct them from internal identifiers, but use the URLs
provided by the API.

The resources that are meant for calling directly is marked with
(entrypoint).

## Authorization

The different groups of resources uses different tokens for
authorization.

# Group Snapshot submission

These resources allow for submitting a batch of images to a snapshot.

In order to access this API a client must supply a valid repository
token in the "Authorization" header.

## Batch resource [/batch]

### Create batch (entrypoint) [POST]

Start a new batch run. Returns the id of the new batch. The id
supplied is the snapshot id, ether this batch will be associated with
the snapshot with the given id, or a new snapshot will be created.

#### History

The history of the snapshot is supplied as a newline separated list of
snapshot ids. It is used for the first batch of a snapshot to find the
parent (baseline) snapshot to compare against and ignored for
subsequent batches on the same snapshot.

When using Git SHAs as snapshot ids, the easiest way to create the
history is `git rev-list HEAD`.

The history does not need to be complete, but just contain enough to
find the parent. A client that knows the ID of the previously
submitted snapshot can use a history of a single entry.

If no parent snapshot was found in the history, the new snapshot will
be a "root" snapshot without any baseline.

The URL returned in the Location header can be used to construct the
URL of the delete batch and add image calls.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

    + Body

            {
                "id": "d8f4590320e1343a915b6394170650a8f35d6926",
                "history": "271ac93c44ac198d92e706c6d6f1d84aefcfa337\n7bee8f3b184e1e141ff76efe369c3b8bfc50e64c"
            }

+ Response 201

    + Headers

            Location: http://localhost:8080/batch/58444f87-0525-429d-ba3c-d7b06cab748a

+ Request Validation error. (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

    + Body

            {}

+ Response 422 (application/json)

        {
            "id": ["The id field is required."]
        }

+ Request Invalid token. (application/json)

    + Headers

            Authorization: Bearer BadToken

    + Body

            {}

+ Response 401

### Delete batch [DELETE /batch/{id}]

Finishes batch run. No further images can be added to this batch, but
further batches on the same snapshot can be created.

+ Parameters

    + id: `58444f87-0525-429d-ba3c-d7b06cab748a` - Batch id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

+ Response 200

+ Request Batch not found.

    + Headers

            Authorization: Bearer MyRepoToken

    + Parameters

        + id: `invalid`

+ Response 404

### Add image [POST /batch/{id}/checkpoint]

Add checkpoint image. Stores image and associates it with the snapshot
of the current batch run.

+ Parameters

    + id: `58444f87-0525-429d-ba3c-d7b06cab748a` - Batch id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

    + Body

            {
                "name": "Frontpage",
                "image": "<base64 PNG data>"
            }

+ Response 201

    + Headers

            Location: http://localhost:8080/checkpoint/5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e

+ Request Missing name (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

    + Body

            {
                "image": "<base64 PNG data>"
            }

+ Response 422 (application/json)

        {
            "name": ["The name field is required."]
        }

+ Request Bad image data (application/json)

    + Headers

            Authorization: Bearer MyRepoToken

    + Body

            {
                "name": "Frontpage",
                "image": "<bad base64 PNG data>"
            }

+ Response 400 (text/plain; charset=UTF-8)

    Base64 data not a valid PNG.

    + Body

            Bad image data

# Group Snapshot resources

These resources returns the state of snapshots and checkpoints, and
provide methods for changing state.

In order to access this API a client must supply a valid frontend
token in the "Authorization" header.


## Snapshot resource [/snapshot]

### Get snapshot (entrypoint) [GET /snapshot/{id}]

Get information about a snapshot, including checkpoints.

+ Parameters

    + id: `d8f4590320e1343a915b6394170650a8f35d6926` - The snapshot id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

+ Response 200 (application/json)

    + Attributes (Snapshot)

+ Request Snapshot not found (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

    + Parameters

        + id: `invalid`


+ Response 404

## Checkpoint resource [/checkpoint]

### Get checkpoint [GET /checkpoint/{checkpoint_id}]

Get information about a checkpoint.

+ Parameters

    + checkpoint_id: `5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e` - Id of checkpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

+ Response 200 (application/json)

    + Attributes (Checkpoint)

+ Request Checkpoint not found

    + Headers

            Authorization: Bearer MyFrontendToken

    + Parameters

        + checkpoint_id: `bad id`

+ Response 404

### Approve checkpoint [PUT /checkpoint/{checkpoint_id}/approve]

Approve the checkpoint. This accepts the changes and marks it as
baseline for future tests.

+ Parameters

    + checkpoint_id: `5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e` - Id of checkpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

+ Response 200

### Reject checkpoint [PUT /checkpoint/{checkpoint_id}/reject]

Reject the changes to this checkpoint and use the existing baseline in
future tests. This marks this snapshot as failed.

+ Parameters

    + checkpoint_id: `5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e` - Id of checkpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

+ Response 200

### Ignore checkpoint [PUT /checkpoint/{checkpoint_id}/ignore]

Ignore the changes to this checkpoint and use the existing baseline in
future tests. Ignored checkpoints does not fail the Snapshot, but are
expected to revert to the baseline in the next test run. It can be
used to ignore spurious failures due to external factors, without
failing the snapshot. Use with care.

+ Parameters

    + checkpoint_id: `5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e` - Id of checkpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer MyFrontendToken

+ Response 200

# Group Internal resources

For internal use. Used by the different parts of Assessor to
communicate.

## Diff resource (entrypoint) [/diff]

Endpoint for reporting differences.

### Post diff [POST /diff]

+ Request (application/json)

    + Headers

            Authorization: Bearer MySharedToken

    + Body

            {
                "image_url": "http://localhost:8081/image/3a14fed556280d45d1542e9723d3cc62326c3777",
                "baseline_url": "http://localhost:8081/image/893ad2d85ff62b3fe5a64cd04a686abfe9f910f7",
                "diff_url": "http://localhost:8081/image/ce0bae5357fc9db204dee766675bb7c5a0122320",
                "different": true
            }

+ Response 200

# Data Structures

## Snapshot (object, fixed-type)
- `self`: *http://localhost:8080/snapshot/d8f4590320e1343a915b6394170650a8f35d6926* (string) - URL and ID of snapshot.
- `id`: *d8f4590320e1343a915b6394170650a8f35d6926* (string) - The snapshot identifier. Mostly corresponds to a commit id in the VCS.
- `checkpoints` (array[Checkpoint]) - Checkpoints of snapshot.
- `status`: unknown, passed, failed (enum) - Snapshot status.
- `run_status`: pending, done (enum) - Snapshot running status.

## Checkpoint (object, fixed-type)
- `self`: *http://localhost:8080/checkpoint/5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e* (string) - URL and ID of checkpoint.
- `name`: *Frontpage* (string) - Name of checkpoint.
- `image_url`: *http://localhost:8081/image/3f9200a6dee485e3fbf67e68b1e9f2bbb6e48387dd1e9c676c2e0bf48feb1a98* (string) - URL of image.
- `baseline_url` (string, nullable) - URL of baseline.
- `diff_url` (string, nullable) - URL of diff.
- `status`: unknown, approved, rejected, ignored (enum) - Checkpoint status.
- `diff_status`: unknown, identical, different (enum) - Checkpoint diff status.
- `actions` (CheckpointActions) - Actions available for this checkpoint.
- `slug`: *frontpage* (string) - A somewhat human-readable identifiier for this checkpoint, usable in URLs. Only guaranteed to be unique within the same checkpoint.

## CheckpointActions (object, fixed-type)
- `approve`: *http://localhost:8080/checkpoint/5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e/approve* (string) Approve URL.
- `reject`: *http://localhost:8080/checkpoint/5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e/reject* (string) Reject URL.
- `ignore`: *http://localhost:8080/checkpoint/5a4aa4425873d6a29a81375d686219e03a92c8860712b2343cbcbb5455ec360e/ignore* (string) Ignore URL.

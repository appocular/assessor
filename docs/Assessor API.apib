FORMAT: 1A

# Assessor

Assessor is the brains of Appocular. It keeps track of snapshots,
checkpoints, batches and images.

Images for visual testing is submitted by creating a batch. A batch is
associated with a snapshot, and images submitted in the batch is put
into checkpoints the on the snapshot. Multiple batches may be run on
the same commit, facilitating multiple test suites or parallel
running.

## Tokens

In order to access the API a client must supply a valid repository
token in the "Authorization" header.

## Batch resource [/batch]

### Create batch [POST]

Start a new batch run. Returns the id of the new batch. The id
supplied is the snapshot id, ether this batch will be associated with
the snapshot with the given id, or a new snapshot will be created.

#### History

The history of the snapshot is supplied as a newline separated list of
snapshot ids. It is used for the first batch of a snapshot to find the
parent (baseline) snapshot to compare against.

When using Git SHAs as snapshot ids, the easiest way to create the
history is `git rev-list HEAD`.

The history does not need to be complete, but just contain enough to
find the parent. A client that knows the ID of the previously
submitted snapshot can use a history of a single entry.

If no parent snapshot was found in the history, the new snapshot will
be a "root" snapshot without any baseline.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Body

            {
                "id": "d8f4590320e1343a915b6394170650a8f35d6926",
                "history": "271ac93c44ac198d92e706c6d6f1d84aefcfa337\n7bee8f3b184e1e141ff76efe369c3b8bfc50e64c"
            }

+ Response 200 (application/json)

        {
            "id": "58444f87-0525-429d-ba3c-d7b06cab748a"
        }

+ Request Validation error. (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Body

            {}

+ Response 422 (application/json)

        {
            "id": ["The id field is required."]
        }

+ Request Invalid token. (application/json)

    + Headers

            Authorization: Bearer BadToken

    + Body

            {}

+ Response 401

### Delete batch [DELETE /batch/{id}]

Finishes batch run. No further images can be added to this batch, but
further batches on the same snapshot can be created.

+ Parameters

    + id: `58444f87-0525-429d-ba3c-d7b06cab748a` - Batch id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

+ Response 200

+ Request Batch not found.

    + Headers

            Authorization: Bearer MySecretToken

    + Parameters

        + id: `invalid`

+ Response 404

### Add image [POST /batch/{id}/checkpoint]

Add checkpoint image. Stores image and associates it with the snapshot
of the current batch run.

+ Parameters

    + id: `58444f87-0525-429d-ba3c-d7b06cab748a` - Batch id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Body

            {
                "name": "Frontpage",
                "image": "<base64 PNG data>"
            }

+ Response 200

+ Request Missing name (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Body

            {
                "image": "<base64 PNG data>"
            }

+ Response 422 (application/json)

        {
            "name": ["The name field is required."]
        }

+ Request Bad image data (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Body

            {
                "name": "Frontpage",
                "image": "<bad base64 PNG data>"
            }

+ Response 400 (text/plain;charset=UTF-8)

    Base64 data not a valid PNG.

    + Body

            Bad image data

## Snapshot resource [/snapshot]

### Get snapshot [GET /snapshot/{id}]

Get information about a snapshot, including checkpoints.

+ Parameters

    + id: `d8f4590320e1343a915b6394170650a8f35d6926` - The snapshot id.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

+ Response 200 (application/json)

        {
            "id": "d8f4590320e1343a915b6394170650a8f35d6926",
            "checkpoints": [
                {
                    "id": "a1c2e7f2912f4844186ff988b44d30d6a191ecb1",
                    "name": "Frontpage",
                    "image_sha": "3a14fed556280d45d1542e9723d3cc62326c3777"
                }
            ]
        }

+ Request Snapshot not found (application/json)

    + Headers

            Authorization: Bearer MySecretToken

    + Parameters

        + id: `invalid`


+ Response 404

## Checkpoint resource [/checkpoint]

### Get checkpoint [GET /checkpoint/{checkpoint_id}]

Get information about a checkpoint.

+ Parameters

    + checkpoint_id: `a1c2e7f2912f4844186ff988b44d30d6a191ecb1` - Id of checkpoint.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

+ Response 200 (application/json)

        {
            "id": "a1c2e7f2912f4844186ff988b44d30d6a191ecb1",
            "name": "Frontpage",
            "image_sha": "3a14fed556280d45d1542e9723d3cc62326c3777"
        }

+ Request Checkpoint not found

    + Headers

            Authorization: Bearer MySecretToken

    + Parameters

        + checkpoint_id: `bad id`

+ Response 404

## Image resource [/image]

### Get image [GET /image/{image_sha}]

Get an image, baseline or diff.

+ Parameters

    + image_sha: `3a14fed556280d45d1542e9723d3cc62326c3777` - Sha of image.

+ Request (application/json)

    + Headers

            Authorization: Bearer MySecretToken

+ Response 200

    + Headers

            Content-Type: image/png

+ Request Image not found

    + Headers

            Authorization: Bearer MySecretToken

    + Parameters

        + image_sha: `bad sha`

+ Response 404
